@dataclass
class ViewSlots:
    subgroup_id: Any
    frames_ab: list[Frame]
    regular_indices: dict[int, int]

def make_view_slots(subgroup_id, base_origin, dist_cutoff_A=1e-6):
    """
    Generate a set of possible coordinate frames for the model to distinguish 
    between.

    The main goal is to generate the frames in such a way that the model can 
    maintain equivariance.  That is, if the input (a 3D model) is rotated, then 
    the output (an index identifying a particular coordinate frame) must be 
    "rotated" in the same way.
    """
    so3 = so3_group()
    g, so3_from_g, sub_from_g = so3.subgroup(subgroup_id)

    n = g.order()
    if n < 0:
        raise ValueError(f"can only make view slots for finite subgroups of SO(3); {subgroup_id!r} is infinite")

    origins = []

    e_regular = np.zeros(n)
    e_regular[0] = 1
    
    for a in g.elements:
        a_regular = g.regular_representation(a) @ e_regular
        a_regular_index = np.argmax(a_regular)

        a_so3 = so3_from_g(a)
        a_rot_matrix = so3.standard_representation()(a_so3)
        a_origin = a_rot_matrix @ base_origin

        for b_origin, b_regular_indices in origins:
            d = np.linalg.norm(a_origin - b_origin)
            if d < dist_cutoff_A:
                b_regular_indices.append(a_regular_index)
                break
        else:
            pair = a_origin, [a_regular_index]
            origins.append(pair)

    assert len(origins) > 1
    assert all_equal(len(idxs) for _, idxs in origins)

    # Sorting guarantees that:
    # - The first frame returned will always have the given base origin,  
    #   because that origin corresponds with the identity element, which will 
    #   always have the first index (0).
    # - The return values won't depend on the order the group elements are 
    #   produced in.
    origins.sort(key=lambda x: min(x[1]))

    frames = np.zeros((len(origins), 4, 4))
    regular_indices = {}
    
    for i, (origin, regular_indices_) in enumerate(origins):
        frames[i] = make_coord_frame(origin, np.zeros(3))
        for j in regular_indices_:
            regular_indices[j] = i

    assert len(regular_indices) == n

    return ViewSlots(
            subgroup_id=subgroup_id,
            frames_ab=frames,
            regular_indices=regular_indices,
    )


